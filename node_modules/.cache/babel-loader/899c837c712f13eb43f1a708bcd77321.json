{"ast":null,"code":"var _jsxFileName = \"/home/trollhero/MEGAsync/Lambda/reactsw-vercel/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, Dimmer, Loader } from \"semantic-ui-react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport People from \"./components/People\";\nimport Planets from \"./components/Planets\"; //Main function definition\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //declare  and init state\n  const [people, setPeople] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [loading, setLoading] = useState(true); //USe Effect\n\n  useEffect(() => {\n    //Async function definition to get the people api data\n    //Promise is...\n    async function fetchPeople() {\n      let res = await fetch(\"https://swapi.dev/api/people/\"); //Assign results to data\n\n      let data = await res.json(); //Call setPeople function, pass in results\n\n      setPeople(data.results); //Set loading to false\n\n      setLoading(false);\n    } //DAsync function definition to get the planet api data\n\n\n    async function fetchPlanets() {\n      let res = await fetch(\"https://swapi.dev/api/planets/\"); //Assign results to data\n\n      let data = await res.json();\n      setPlanets(data.results); //Set loading to false\n\n      setLoading(false);\n    } //Invoke the functions\n\n\n    fetchPeople();\n    fetchPlanets(); //Dependency \n    //Empty array to prevent endless calls\n  }, []);\n  console.log(\"People data>>>>\", people);\n  console.log(\"Planets data>>>>\", planets); //Return function returns JSX to render to DOM\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: loading ?\n        /*#__PURE__*/\n        //Show the loading screen\n        _jsxDEV(Dimmer, {\n          active: true,\n          inverted: true,\n          children: /*#__PURE__*/_jsxDEV(Loader, {\n            inverted: true,\n            children: \" LOADING...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/people\",\n            children: /*#__PURE__*/_jsxDEV(People, {\n              data: people\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/planets\",\n            children: /*#__PURE__*/_jsxDEV(Planets, {\n              data: planets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"FNe2ZQoUirg1GUbZyGga46or88Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/trollhero/MEGAsync/Lambda/reactsw-vercel/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Container","Dimmer","Loader","Navbar","Home","People","Planets","App","people","setPeople","planets","setPlanets","loading","setLoading","fetchPeople","res","fetch","data","json","results","fetchPlanets","console","log"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport {Container, Dimmer, Loader} from \"semantic-ui-react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport People from \"./components/People\";\nimport Planets from \"./components/Planets\";\n\n//Main function definition\nfunction App() {\n    //declare  and init state\n    const [people, setPeople] = useState([]);\n    const [planets, setPlanets] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    //USe Effect\n    useEffect(() => {\n        //Async function definition to get the people api data\n        //Promise is...\n        async function fetchPeople() {\n            let res = await fetch(\"https://swapi.dev/api/people/\");\n            //Assign results to data\n            let data = await res.json();\n            //Call setPeople function, pass in results\n            setPeople(data.results);\n            //Set loading to false\n            setLoading(false);\n        }\n        //DAsync function definition to get the planet api data\n        async function fetchPlanets() {\n            let res = await fetch(\"https://swapi.dev/api/planets/\");\n            //Assign results to data\n            let data = await res.json();\n            setPlanets(data.results);\n            //Set loading to false\n            setLoading(false);\n\n        }\n        //Invoke the functions\n        fetchPeople();\n        fetchPlanets();\n\n\n        //Dependency \n        //Empty array to prevent endless calls\n    }, [])\n\n    console.log(\"People data>>>>\", people);\n    console.log(\"Planets data>>>>\", planets);\n    \n\n\t//Return function returns JSX to render to DOM\n  return (\n    <>\n        <Router>\n           {/* Render the NavBar component here */}\n           <Navbar/>\n            <Container>\n                {/*Ternary Loading indicator. If loading is true...*/}\n                {loading ? (\n                    //Show the loading screen\n                    <Dimmer active inverted>\n                        <Loader inverted > LOADING...</Loader>\n                    </Dimmer>\n                    )\n                    //Else, access the switch\n                    : (\n                        <Switch>\n                            {/*Route to home component*/}\n                            <Route exact path = \"/\">\n                                <Home/>\n                            </Route>\n                            {/*Route to people component,pass in people as props*/}\n                            {/*Maybe replace data with component??*/}\n                            <Route exact path = \"/people\">\n                                <People data = {people}/>\n                            </Route>\n                            {/*Route to planets component*/}\n                            <Route exact path = \"/planets\">\n                                <Planets data = {planets}/>\n                            </Route>\n                    </Switch>\n                ) }\n\n            </Container>\n       </Router>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}